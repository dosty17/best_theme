import 'package:analyzer/dart/element/element.dart';
import 'package:best_theme_annotation/Best_theme_annotation.dart';
// import 'package:best_theme_annotation/best_theme_annotation.dart';
import 'package:build/build.dart';
import 'package:source_gen/source_gen.dart';
// import 'package:best_theme_generator/src/model_visitor.dart';
import 'model_visitor.dart';

class BestGenerator extends GeneratorForAnnotation<BestTheme> {
  @override
  String generateForAnnotatedElement(
    Element element,
    ConstantReader annotation,
    BuildStep buildStep,
  ) {
    final ModelVisitor visitor = ModelVisitor();
    element.visitChildren(visitor);

    final buffer = StringBuffer();

    // Class name from the annotated element
    final className = element.name;

    buffer.writeln('// ignore_for_file: non_constant_identifier_names');
    buffer.writeln(
        '// **************************************************************************');
    buffer.writeln('');
    buffer.writeln('// Custom code generated by: Dosty Pshtiwan');
    buffer
        .writeln('// ********************************************************');
    buffer.writeln('// This is a custom generator for handling theme colors');
    buffer.writeln('// Generated for: $className');
    buffer.writeln('');

    // Begin _$ClassName
    buffer.writeln('class _\$$className {');
    buffer.writeln('  late List<BestColor> myColors;');
    buffer.writeln('  final Map<String, Map<String, Color>> _colors = {};');
    buffer.writeln('  bool isDark = false;');

    List vars = annotation
        .read('vars')
        .listValue
        .map((e) => e.toStringValue())
        .toList();
    if (vars.isNotEmpty) {
      for (var eC in vars) {
        buffer.writeln("  late Color ${eC.toString().replaceFirst('_', '')};");
      }
    }
    buffer.writeln(
        '  List<ThemeMode> typeOfThemes = [ThemeMode.system, ThemeMode.light, ThemeMode.dark];');
    buffer.writeln('  ThemeMode currentTheme = ThemeMode.system;');
    // buffer.writeln('  ThemeParam get colors => _themeNotifier.value;');
    buffer.writeln('');
    // buffer.writeln(
    //     '  final ValueNotifier<ThemeParam> _themeNotifier = ValueNotifier(ThemeParam(ThemeMode.system, dataColor, false));');
    buffer.writeln('  late final ValueNotifier<ThemeParam> _themeNotifier;');
    buffer.writeln('');
    buffer.writeln(
        '  _\$$className({List<BestColor>? myColors, ThemeMode mode = ThemeMode.system}) {');

    buffer.writeln('if (myColors != null) {');
    buffer.writeln('    for (var color in myColors) {');
    buffer.writeln('      _colors[color.name] = color.toMap();');
    buffer.writeln('    }');
    buffer.writeln('    }');
    if (vars.isNotEmpty) {
      for (var eC in vars) {
        buffer.writeln(
            "    ${eC.toString().replaceFirst('_', '')} = _colors['${eC.toString().replaceFirst('_', '')}']![isDark ? 'dark' : 'light']!;");
      }
    }

    buffer.writeln('if (myColors != null) {');
    buffer.writeln('this.myColors = myColors;');
    buffer.writeln('}');
    buffer.writeln('isDark=mode == ThemeMode.dark;');
    buffer.writeln(
        '    _themeNotifier = ValueNotifier(ThemeParam(mode, this.myColors, isDark));');
    buffer.writeln('  }');

    // Generate the `BestTheme` method
    buffer.writeln('  ValueListenableBuilder BestTheme({');
    buffer.writeln('    required BuildContext context,');
    buffer.writeln('    required MaterialApp materialApp,');
    buffer.writeln('    bool useRouterConfig = false,');
    // buffer.writeln('    RouterConfig<Object>? routerConfig,');
    buffer.writeln('  }) {');
    buffer.writeln('    return ValueListenableBuilder<ThemeParam>(');
    buffer.writeln('      valueListenable: _themeNotifier,');
    buffer.writeln('      builder: (_, ThemeParam param, __) {');
    buffer.writeln('        var currentMode = param.mode;');
    buffer.writeln(
        '        if (_themeNotifier.value.mode.index == ThemeMode.system.index) {');
    buffer.writeln(
        '          isDark = MediaQuery.of(context).platformBrightness == Brightness.dark;');
    buffer.writeln(
        '_themeNotifier.value = ThemeParam(ThemeMode.system, myColors, isDark);');
    buffer.writeln('toggleColor();');
    buffer.writeln('        }');
    buffer.writeln('        return useRouterConfig ? MaterialApp.router(');
    buffer.writeln('          routerConfig: materialApp.routerConfig,');
    buffer.writeln('          builder: materialApp.builder,');
    buffer.writeln(
        '          checkerboardOffscreenLayers: materialApp.checkerboardOffscreenLayers,');
    buffer.writeln(
        '          checkerboardRasterCacheImages: materialApp.checkerboardRasterCacheImages,');
    buffer.writeln('          color: materialApp.color,');
    buffer.writeln('          theme: materialApp.theme,');
    buffer.writeln('          darkTheme: materialApp.darkTheme ??');
    buffer.writeln(
        '              ThemeData.dark().copyWith(colorScheme: materialApp.theme?.colorScheme),');
    buffer.writeln(
        '          debugShowCheckedModeBanner: materialApp.debugShowCheckedModeBanner,');
    buffer.writeln(
        '          debugShowMaterialGrid: materialApp.debugShowMaterialGrid,');
    buffer.writeln(
        '          highContrastDarkTheme: materialApp.highContrastDarkTheme,');
    buffer
        .writeln('          highContrastTheme: materialApp.highContrastTheme,');
    buffer.writeln('          locale: materialApp.locale,');
    buffer.writeln('          key: materialApp.key,');
    buffer.writeln(
        '          localeListResolutionCallback: materialApp.localeListResolutionCallback,');
    buffer.writeln('          title: materialApp.title,');
    buffer.writeln('          themeMode: currentMode,');
    buffer.writeln(
        '          localeResolutionCallback: materialApp.localeResolutionCallback,');
    buffer.writeln(
        '          localizationsDelegates: materialApp.localizationsDelegates,');
    buffer.writeln(
        '          restorationScopeId: materialApp.restorationScopeId,');
    buffer.writeln('          scrollBehavior: materialApp.scrollBehavior,');
    buffer.writeln('          supportedLocales: materialApp.supportedLocales,');
    buffer.writeln(
        '          themeAnimationCurve: materialApp.themeAnimationCurve,');
    buffer.writeln(
        '          themeAnimationDuration: materialApp.themeAnimationDuration,');
    buffer.writeln(
        '          themeAnimationStyle: materialApp.themeAnimationStyle,');
    buffer.writeln('        ) : MaterialApp(');
    buffer.writeln('          actions: materialApp.actions,');
    buffer.writeln('          builder: materialApp.builder,');
    buffer.writeln(
        '          checkerboardOffscreenLayers: materialApp.checkerboardOffscreenLayers,');
    buffer.writeln(
        '          checkerboardRasterCacheImages: materialApp.checkerboardRasterCacheImages,');
    buffer.writeln('          color: materialApp.color,');
    buffer.writeln('          theme: materialApp.theme,');
    buffer.writeln('          darkTheme: materialApp.darkTheme ??');
    buffer.writeln(
        '              ThemeData.dark().copyWith(colorScheme: materialApp.theme?.colorScheme),');
    buffer.writeln(
        '          debugShowCheckedModeBanner: materialApp.debugShowCheckedModeBanner,');
    buffer.writeln(
        '          debugShowMaterialGrid: materialApp.debugShowMaterialGrid,');
    buffer.writeln(
        '          highContrastDarkTheme: materialApp.highContrastDarkTheme,');
    buffer
        .writeln('          highContrastTheme: materialApp.highContrastTheme,');
    buffer.writeln('          home: materialApp.home,');
    buffer.writeln('          initialRoute: materialApp.initialRoute,');
    buffer.writeln('          locale: materialApp.locale,');
    buffer.writeln('          key: materialApp.key,');
    buffer.writeln(
        '          localeListResolutionCallback: materialApp.localeListResolutionCallback,');
    buffer.writeln('          title: materialApp.title,');
    buffer.writeln('          themeMode: currentMode,');
    buffer.writeln(
        '          localeResolutionCallback: materialApp.localeResolutionCallback,');
    buffer.writeln(
        '          localizationsDelegates: materialApp.localizationsDelegates,');
    buffer.writeln('          navigatorKey: materialApp.navigatorKey,');
    buffer.writeln(
        '          navigatorObservers: materialApp.navigatorObservers ?? [],');
    buffer.writeln(
        '          onGenerateInitialRoutes: materialApp.onGenerateInitialRoutes,');
    buffer.writeln('          onGenerateRoute: materialApp.onGenerateRoute,');
    buffer.writeln('          onGenerateTitle: materialApp.onGenerateTitle,');
    buffer.writeln(
        '          onNavigationNotification: materialApp.onNavigationNotification,');
    buffer.writeln('          onUnknownRoute: materialApp.onUnknownRoute,');
    buffer.writeln(
        '          restorationScopeId: materialApp.restorationScopeId,');
    buffer.writeln('          routes: materialApp.routes ?? {},');
    buffer.writeln(
        '          scaffoldMessengerKey: materialApp.scaffoldMessengerKey,');
    buffer.writeln('          scrollBehavior: materialApp.scrollBehavior,');
    buffer.writeln('          shortcuts: materialApp.shortcuts,');
    buffer.writeln(
        '          showPerformanceOverlay: materialApp.showPerformanceOverlay,');
    buffer.writeln(
        '          showSemanticsDebugger: materialApp.showSemanticsDebugger,');
    buffer.writeln('          supportedLocales: materialApp.supportedLocales,');
    buffer.writeln(
        '          themeAnimationCurve: materialApp.themeAnimationCurve,');
    buffer.writeln(
        '          themeAnimationDuration: materialApp.themeAnimationDuration,');
    buffer.writeln(
        '          themeAnimationStyle: materialApp.themeAnimationStyle,');
    buffer.writeln('        );');
    buffer.writeln('      },');
    buffer.writeln('    );');
    buffer.writeln('  }');
    buffer.writeln('');

    // Generate toggle methods
    buffer.writeln('  void toggle() {');
    buffer.writeln('    isDark = !isDark;');
    buffer.writeln('toggleColor();');
    buffer.writeln(
        '    _themeNotifier.value = ThemeParam(isDark ? ThemeMode.dark : ThemeMode.light, myColors, isDark);');
    buffer.writeln('    currentTheme = _themeNotifier.value.mode;');
    buffer.writeln('  }');
    buffer.writeln('');

    buffer.writeln('  void toDark() {');
    buffer.writeln('    isDark = true;');
    buffer.writeln('toggleColor();');
    buffer.writeln(
        '    _themeNotifier.value = ThemeParam(ThemeMode.dark, myColors, true);');
    buffer.writeln('    currentTheme = _themeNotifier.value.mode;');
    buffer.writeln('  }');
    buffer.writeln('');

    buffer.writeln('  void toLight() {');
    buffer.writeln('    isDark = false;');
    buffer.writeln('toggleColor();');
    buffer.writeln(
        '    _themeNotifier.value = ThemeParam(ThemeMode.light, myColors, false);');
    buffer.writeln('    currentTheme = _themeNotifier.value.mode;');
    buffer.writeln('  }');
    buffer.writeln('');

    buffer.writeln('  void toSystem(BuildContext context) {');
    buffer.writeln(
        '    isDark = MediaQuery.of(context).platformBrightness == Brightness.dark;');
    buffer.writeln('toggleColor();');
    buffer.writeln(
        '    _themeNotifier.value = ThemeParam(ThemeMode.system, myColors, isDark);');
    buffer.writeln('    currentTheme = _themeNotifier.value.mode;');
    buffer.writeln('  }');
    buffer.writeln('');
    buffer.writeln('''
adanceToggle({required BuildContext context, required ThemeMode mode}) {
   if (mode == ThemeMode.system) {
      isDark = MediaQuery.of(context).platformBrightness == Brightness.dark;
      _themeNotifier.value.mode = ThemeMode.system;
    } else {
      isDark = mode == ThemeMode.dark;
    }
    toggleColor();
    _themeNotifier.value = ThemeParam(mode, myColors, isDark);
    currentTheme = _themeNotifier.value.mode;
    
  }

  Color primaryColor(context) => Theme.of(context).primaryColor;
  Color scaffoldBackgroundColor(context) =>
      Theme.of(context).scaffoldBackgroundColor;
  Color primaryColorScheme(context) => Theme.of(context).colorScheme.primary;
  Color secondaryColorScheme(context) =>
      Theme.of(context).colorScheme.secondary;
  Color cardColor(context) => Theme.of(context).cardColor;
  Color primaryColorDark(context) => Theme.of(context).primaryColorDark;
  Color primaryColorLight(context) => Theme.of(context).primaryColorLight;
  ThemeData theme(context) => Theme.of(context);
''');

    buffer.writeln(' toggleColor(){');
    if (vars.isNotEmpty) {
      for (var eC in vars) {
        buffer.writeln(
            "    ${eC.toString().replaceFirst('_', '')} = _colors['${eC.toString().replaceFirst('_', '')}']![isDark ? 'dark' : 'light']!;");
      }
    }
    buffer.writeln('}');

    // Generate the wrapWithTheme method
    buffer.writeln('  Widget BestThemeBuilder({');
    buffer.writeln(
        '    required Widget Function(ThemeParam theme, BuildContext context) builder,');
    buffer.writeln('  }) {');
    buffer.writeln('    return ValueListenableBuilder<ThemeParam>(');
    buffer.writeln('      valueListenable: _themeNotifier,');
    buffer.writeln(
        '      builder: (context, themeParam, _) => builder(themeParam, context),');
    buffer.writeln('    );');
    buffer.writeln('  }');
    buffer.writeln('');
    buffer.writeln('}');
    buffer.writeln('');

    // Add the ThemeParam class dynamically
    buffer.writeln('class ThemeParam {');
    buffer.writeln('  late ThemeMode mode;');
    buffer.writeln('  final Map<String, Map<String, Color>> _colors = {};');

    if (vars.isNotEmpty) {
      for (var eC in vars) {
        buffer.writeln("  late Color ${eC.toString().replaceFirst('_', '')};");
      }
    }

    buffer.writeln(
        '  ThemeParam(this.mode, List<BestColor> myColors, bool isDark) {');
    buffer.writeln('    for (var color in myColors) {');
    buffer.writeln('      _colors[color.name] = color.toMap();');
    buffer.writeln('    }');
    if (vars.isNotEmpty) {
      for (var eC in vars) {
        buffer.writeln(
            "    ${eC.toString().replaceFirst('_', '')} = _colors['${eC.toString().replaceFirst('_', '')}']![isDark ? 'dark' : 'light']!;");
      }
    }
    buffer.writeln('  }');
    buffer.writeln('}');
    return buffer.toString();
  }
}
